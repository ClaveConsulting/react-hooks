{"pageProps":{"id":"use-array-state","name":"UseArrayState","demo":{"ts":"import useArrayState from \"@clave/use-array-state\";\nimport * as React from \"react\";\nimport { FormEvent, useCallback, useState } from \"react\";\nimport style from \"./style.module.css\";\n\ninterface TodoItem {\n  readonly description: string;\n  readonly done: boolean;\n}\nexport default function Demo() {\n  const [items, setItems] = useArrayState<TodoItem>([]);\n  const [value, setValue] = useState(\"\");\n\n  const submit = useCallback(\n    (e: FormEvent) => {\n      setItems.append({ description: value, done: false });\n      setValue(\"\");\n      e.preventDefault();\n    },\n    [value]\n  );\n\n  return (\n    <div className={style.demo}>\n      <h2>todos</h2>\n      <ul>\n        {items.map(({ done, description }, index) => (\n          <li>\n            <input\n              type=\"checkbox\"\n              onChange={() =>\n                setItems.editAt(index, (old) => ({ ...old, done: !done }))\n              }\n            />\n            <span style={{ textDecoration: done ? \"line-through\" : \"none\" }}>\n              {description}\n            </span>\n            <button onClick={() => setItems.removeAt(index)}>X</button>\n          </li>\n        ))}\n      </ul>\n\n      <form onSubmit={submit}>\n        <input onChange={(e) => setValue(e.target.value)} value={value} />\n        <button type=\"submit\" disabled={!value}>\n          Add\n        </button>\n      </form>\n    </div>\n  );\n}\n","js":"import useArrayState from \"@clave/use-array-state\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport style from \"./style.module.css\";\nexport default function Demo() {\n    const [items, setItems] = useArrayState([]);\n    const [value, setValue] = useState(\"\");\n    const submit = useCallback((e) => {\n        setItems.append({ description: value, done: false });\n        setValue(\"\");\n        e.preventDefault();\n    }, [value]);\n    return (<div className={style.demo}>\n      <h2>todos</h2>\n      <ul>\n        {items.map(({ done, description }, index) => (<li>\n            <input type=\"checkbox\" onChange={() => setItems.editAt(index, (old) => ({ ...old, done: !done }))}/>\n            <span style={{ textDecoration: done ? \"line-through\" : \"none\" }}>\n              {description}\n            </span>\n            <button onClick={() => setItems.removeAt(index)}>X</button>\n          </li>))}\n      </ul>\n\n      <form onSubmit={submit}>\n        <input onChange={(e) => setValue(e.target.value)} value={value}/>\n        <button type=\"submit\" disabled={!value}>\n          Add\n        </button>\n      </form>\n    </div>);\n}\n"},"source":{"ts":"import { SetStateAction, useMemo, useState } from \"react\";\n\n/**\n * Create a state for an array with useful array manipulation methods\n *\n * @param initial The initial array or factory function\n * @returns A pair of state and setState\n */\nexport default function useArrayState<T>(initial: T[] | (() => T[])) {\n  const [state, setState] = useState<T[]>(initial);\n\n  const setArrayState = useMemo(() => {\n    const setValue = (v: SetStateAction<T[]>) => setState(v);\n\n    /**\n     * Appends a value to the end array\n     * @param values One or more values to append to the array\n     */\n    setValue.append = (...values: T[]) => {\n      setState((existing) => [...existing, ...values]);\n    };\n\n    /**\n     * Inserts a value into the array at a specific position\n     * @param index The position in which to insert the value\n     * @param values One or more values to insert into the array\n     */\n    setValue.insertAt = (index: number, ...values: T[]) => {\n      setState((existing) => {\n        const changed = [...existing];\n        changed.splice(index, 0, ...values);\n        return changed;\n      });\n    };\n\n    /**\n     * Prepends a vaule to the beginning of the array\n     * @param values One or more values to prepend to the array\n     */\n    setValue.prepend = (...values: T[]) => {\n      setState((existing) => [...values, ...existing]);\n    };\n\n    /**\n     * Removes the item at the specific index from the array\n     * @param index The position of the item to remove\n     */\n    setValue.removeAt = (index: number) => {\n      setState((existing) => existing.filter((_, i) => i !== index));\n    };\n\n    /**\n     * Removes the specific value from the array\n     *\n     * This relies on strict equality, and will remove all\n     * matching elements from the array\n     * @param values One or more values to remove\n     */\n    setValue.remove = (...values: T[]) => {\n      setState((existing) => existing.filter((v) => !values.includes(v)));\n    };\n\n    /**\n     * Edits the element at a specific position in the array.\n     * The second parameter is a function that receives the existing item\n     * and returns the new item\n     *\n     * @param index The position in the array of the item to edit\n     * @param edit The lambda function used to edit the item\n     */\n    setValue.editAt = (index: number, edit: (old: T) => T) => {\n      setState((existing) =>\n        existing.map((entry, i) => (i === index ? edit(entry) : entry))\n      );\n    };\n\n    /**\n     * Replaces the item at a position in the array with a new item\n     * @param index The position in the array of the item to replace\n     * @param value The new value to replace the old value with\n     */\n    setValue.replaceAt = (index: number, value: T) => {\n      setState((existing) =>\n        existing.map((entry, i) => (i === index ? value : entry))\n      );\n    };\n\n    /**\n     * Replaces (potentially several) items in the array with a new item\n     *\n     * @param oldValue The old value that should be replaced\n     * @param newValue The new value to be used instead of the old value\n     */\n    setValue.replace = (oldValue: T, newValue: T) => {\n      setState((existing) =>\n        existing.map((entry) => (entry === oldValue ? newValue : entry))\n      );\n    };\n\n    return setValue;\n  }, []);\n\n  return [state, setArrayState] as const;\n}\n","js":"import { useMemo, useState } from \"react\";\n/**\n * Create a state for an array with useful array manipulation methods\n *\n * @param initial The initial array or factory function\n * @returns A pair of state and setState\n */\nexport default function useArrayState(initial) {\n    const [state, setState] = useState(initial);\n    const setArrayState = useMemo(() => {\n        const setValue = (v) => setState(v);\n        /**\n         * Appends a value to the end array\n         * @param values One or more values to append to the array\n         */\n        setValue.append = (...values) => {\n            setState((existing) => [...existing, ...values]);\n        };\n        /**\n         * Inserts a value into the array at a specific position\n         * @param index The position in which to insert the value\n         * @param values One or more values to insert into the array\n         */\n        setValue.insertAt = (index, ...values) => {\n            setState((existing) => {\n                const changed = [...existing];\n                changed.splice(index, 0, ...values);\n                return changed;\n            });\n        };\n        /**\n         * Prepends a vaule to the beginning of the array\n         * @param values One or more values to prepend to the array\n         */\n        setValue.prepend = (...values) => {\n            setState((existing) => [...values, ...existing]);\n        };\n        /**\n         * Removes the item at the specific index from the array\n         * @param index The position of the item to remove\n         */\n        setValue.removeAt = (index) => {\n            setState((existing) => existing.filter((_, i) => i !== index));\n        };\n        /**\n         * Removes the specific value from the array\n         *\n         * This relies on strict equality, and will remove all\n         * matching elements from the array\n         * @param values One or more values to remove\n         */\n        setValue.remove = (...values) => {\n            setState((existing) => existing.filter((v) => !values.includes(v)));\n        };\n        /**\n         * Edits the element at a specific position in the array.\n         * The second parameter is a function that receives the existing item\n         * and returns the new item\n         *\n         * @param index The position in the array of the item to edit\n         * @param edit The lambda function used to edit the item\n         */\n        setValue.editAt = (index, edit) => {\n            setState((existing) => existing.map((entry, i) => (i === index ? edit(entry) : entry)));\n        };\n        /**\n         * Replaces the item at a position in the array with a new item\n         * @param index The position in the array of the item to replace\n         * @param value The new value to replace the old value with\n         */\n        setValue.replaceAt = (index, value) => {\n            setState((existing) => existing.map((entry, i) => (i === index ? value : entry)));\n        };\n        /**\n         * Replaces (potentially several) items in the array with a new item\n         *\n         * @param oldValue The old value that should be replaced\n         * @param newValue The new value to be used instead of the old value\n         */\n        setValue.replace = (oldValue, newValue) => {\n            setState((existing) => existing.map((entry) => (entry === oldValue ? newValue : entry)));\n        };\n        return setValue;\n    }, []);\n    return [state, setArrayState];\n}\n"},"links":[{"name":"UseArrayState","path":"use-array-state"},{"name":"UseBooleanState","path":"use-boolean-state"},{"name":"UseDebounce","path":"use-debounce"},{"name":"UseObjectState","path":"use-object-state"}],"readme":"<h1>useArrayState</h1>\n<blockquote>\n<p>Make it easier to work with stateful arrays</p>\n</blockquote>\n<p><a href=\"https://claveconsulting.github.io/react-hooks/use-array-state\">Documentation</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @clave/use-array-state\n</code></pre></div>\n<p>The goal of this hook is to make it easier to manipulate array state. For example, if you want to add a new item to an array you can call <code>setState.append(value)</code>.</p>\n<h2>Usage</h2>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword module\">import</span> <span class=\"token imports\">useArrayState</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@clave/use-array-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// useArrayState instead of useState</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useArrayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// setItems behaves like normal</span>\n<span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"x\", \"y\", \"z\"]</span>\n\n<span class=\"token comment\">// Append an item to the end of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\"]</span>\n\n<span class=\"token comment\">// Append multiple items to the end of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]</span>\n\n<span class=\"token comment\">// Prepend an item to the beginning of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"x\", \"a\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Prepend multiple items to the beginning of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"x\", \"y\", \"z\", \"a\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Insert an item somewhere in the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">insertAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Insert multiple items somewhere in the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">insertAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"y\", \"z\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Remove a value from the list</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"c\"]</span>\n\n<span class=\"token comment\">// Remove several values from the list</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"c\"]</span>\n\n<span class=\"token comment\">// Remove the value at specified index</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"c\"]</span>\n\n<span class=\"token comment\">// Edit the value at a specified index</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">editAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">ToUpperCase</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"B\", \"c\"]</span>\n\n<span class=\"token comment\">// Replace the value at a specified index</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replaceAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"c\"]</span>\n\n<span class=\"token comment\">// Replace a value with another value</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"c\"]</span>\n</code></pre></div>\n"},"__N_SSG":true}