{"pageProps":{"id":"use-debounce","name":"UseDebounce","demo":{"ts":"import useDebounce from \"@clave/use-debounce\";\nimport React, { useEffect, useState } from \"react\";\nimport countries from \"./countries\";\nimport style from \"./style.module.css\";\n\nexport default function Demo() {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n\n  const delayedQuery = useDebounce(query, 500);\n\n  useEffect(() => {\n    setResults(search(query));\n  }, [delayedQuery]);\n\n  return (\n    <div className={style.demo}>\n      <label>Search for a country</label>\n      <input onChange={(e) => setQuery(e.currentTarget.value)} value={query} />\n      <ul>\n        {results.map((country) => (\n          <li>{country}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction search(query: string) {\n  if (!query) return [];\n\n  return countries.filter((country) =>\n    country.toLowerCase().includes(query.toLowerCase())\n  );\n}\n","js":"import useDebounce from \"@clave/use-debounce\";\nimport React, { useEffect, useState } from \"react\";\nimport countries from \"./countries\";\nimport style from \"./style.module.css\";\nexport default function Demo() {\n    const [query, setQuery] = useState(\"\");\n    const [results, setResults] = useState([]);\n    const delayedQuery = useDebounce(query, 500);\n    useEffect(() => {\n        setResults(search(query));\n    }, [delayedQuery]);\n    return (<div className={style.demo}>\n      <label>Search for a country</label>\n      <input onChange={(e) => setQuery(e.currentTarget.value)} value={query}/>\n      <ul>\n        {results.map((country) => (<li>{country}</li>))}\n      </ul>\n    </div>);\n}\nfunction search(query) {\n    if (!query)\n        return [];\n    return countries.filter((country) => country.toLowerCase().includes(query.toLowerCase()));\n}\n"},"source":{"ts":"import { useEffect, useState } from \"react\";\n\n/**\n * Write documentation here\n */\nexport default function useDebounce<T>(value: T, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => setDebouncedValue(value), delay);\n\n    return () => clearTimeout(handler);\n\n  }, [value]);\n\n  return debouncedValue;\n}","js":"import { useEffect, useState } from \"react\";\n/**\n * Write documentation here\n */\nexport default function useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(() => {\n        const handler = setTimeout(() => setDebouncedValue(value), delay);\n        return () => clearTimeout(handler);\n    }, [value]);\n    return debouncedValue;\n}\n"},"links":[{"name":"UseArrayState","path":"use-array-state"},{"name":"UseBooleanState","path":"use-boolean-state"},{"name":"UseDebounce","path":"use-debounce"},{"name":"UseObjectState","path":"use-object-state"}],"readme":"<h1>useDebounce</h1>\n<blockquote>\n<p>Wait until a value stops changing</p>\n</blockquote>\n<p><a href=\"https://claveconsulting.github.io/react-hooks/use-debounce\">Documentation</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @clave/use-debounce\n</code></pre></div>\n<p>This hook returns a value that changes when another vaule stops changing. It is very useful for search inputs where you don't want to react on every keystroke.</p>\n<h2>Usage</h2>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword module\">import</span> <span class=\"token imports\">useDebounce</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@clave/use-debounce\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> delayedValue <span class=\"token operator\">=</span> <span class=\"token function\">useDebounce</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//delayedValue will only change when value has been unchanging for 500ms</span>\n\n<span class=\"token comment\">// It's very useful for searchboxes where you want to wait until the user has stopped typing</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>delayedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>delayedValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setValue<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n"},"__N_SSG":true}