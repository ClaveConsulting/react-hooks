{"pageProps":{"id":"use-object-state","name":"UseObjectState","demo":{"ts":"import useObjectState from \"@clave/use-object-state\";\nimport * as React from \"react\";\nimport style from \"./style.module.css\";\n\nexport default function Demo() {\n  const [state, setState] = useObjectState({\n    active: true,\n    secondCheckbox: false,\n    number: 0,\n    text: \"\",\n  });\n\n  return (\n    <div className={style.demo}>\n      <label>\n        <input\n          checked={state.active}\n          type=\"checkbox\"\n          onChange={(e) => setState.set(\"active\", e.currentTarget.checked)}\n        />\n        Active\n      </label>\n      <label>\n        <input\n          checked={state.secondCheckbox}\n          type=\"checkbox\"\n          onChange={(e) =>\n            setState.set(\"secondCheckbox\", e.currentTarget.checked)\n          }\n        />\n        The second checbox\n      </label>\n      <label>\n        Number and text\n        <input\n          type=\"number\"\n          onChange={(e) =>\n            setState.with({\n              number: e.currentTarget.valueAsNumber,\n              text: e.currentTarget.value,\n            })\n          }\n          value={state.number}\n        />\n      </label>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </div>\n  );\n}\n","js":"import useObjectState from \"@clave/use-object-state\";\nimport * as React from \"react\";\nimport style from \"./style.module.css\";\nexport default function Demo() {\n    const [state, setState] = useObjectState({\n        active: true,\n        secondCheckbox: false,\n        number: 0,\n        text: \"\",\n    });\n    return (<div className={style.demo}>\n      <label>\n        <input checked={state.active} type=\"checkbox\" onChange={(e) => setState.set(\"active\", e.currentTarget.checked)}/>\n        Active\n      </label>\n      <label>\n        <input checked={state.secondCheckbox} type=\"checkbox\" onChange={(e) => setState.set(\"secondCheckbox\", e.currentTarget.checked)}/>\n        The second checbox\n      </label>\n      <label>\n        Number and text\n        <input type=\"number\" onChange={(e) => setState.with({\n        number: e.currentTarget.valueAsNumber,\n        text: e.currentTarget.value,\n    })} value={state.number}/>\n      </label>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </div>);\n}\n"},"source":{"ts":"import { Dispatch, SetStateAction, useMemo, useState } from \"react\";\n\nexport interface SetObjectState<T> extends Dispatch<SetStateAction<T>> {\n  /**\n   * Sets the property of key to value in the object\n   * @param key The object key to set the value of\n   * @param value The value to set\n   */\n  set<K extends keyof T>(key: K, value: T[K]): void;\n\n  /**\n   * Sets several properties in the object\n   * @param v An object with several properties to set\n   */\n  with(v: Partial<T>): void;\n\n  /**\n   * Edit a property in the object\n   * @param key The key of the object to edit\n   * @param edit A method that receives the old property value and will return the new value\n   */\n  edit<K extends keyof T>(key: K, edit: (v: T[K]) => T[K]): void;\n}\n\n\n/**\n * Create a state for an object with useful manipulation methods\n *\n * @param initial The initial object or factory function\n * @returns A pair of state and setState\n */\nexport default function useObjectState<T extends Record<string, unknown>>(\n  initial: T | (() => T)\n) {\n  const [state, setState] = useState<T>(initial);\n\n  const setObjectState = useMemo(() => {\n    const setValue: SetObjectState<T> = (v: SetStateAction<T>) => setState(v);\n\n    /**\n     * Sets the property of key to value in the object\n     * @param key The object key to set the value of\n     * @param value The value to set\n     */\n    setValue.set = <K extends keyof T>(key: K, value: T[K]) =>\n      setState((x) => ({ ...x, [key]: value }));\n\n    /**\n     * Sets several properties in the object\n     * @param v An object with several properties to set\n     */\n    setValue.with = (v: Partial<T>) => setState((x) => ({ ...x, ...v }));\n\n    /**\n     * Edit a property in the object\n     * @param key The key of the object to edit\n     * @param edit A method that receives the old property value and will return the new value\n     */\n    setValue.edit = <K extends keyof T>(key: K, edit: (v: T[K]) => T[K]) =>\n      setState((x) => ({ ...x, [key]: edit(x[key]) }));\n\n    return setValue;\n  }, []);\n\n  return [state, setObjectState] as const;\n}\n","js":"import { useMemo, useState } from \"react\";\n/**\n * Create a state for an object with useful manipulation methods\n *\n * @param initial The initial object or factory function\n * @returns A pair of state and setState\n */\nexport default function useObjectState(initial) {\n    const [state, setState] = useState(initial);\n    const setObjectState = useMemo(() => {\n        const setValue = (v) => setState(v);\n        /**\n         * Sets the property of key to value in the object\n         * @param key The object key to set the value of\n         * @param value The value to set\n         */\n        setValue.set = (key, value) => setState((x) => ({ ...x, [key]: value }));\n        /**\n         * Sets several properties in the object\n         * @param v An object with several properties to set\n         */\n        setValue.with = (v) => setState((x) => ({ ...x, ...v }));\n        /**\n         * Edit a property in the object\n         * @param key The key of the object to edit\n         * @param edit A method that receives the old property value and will return the new value\n         */\n        setValue.edit = (key, edit) => setState((x) => ({ ...x, [key]: edit(x[key]) }));\n        return setValue;\n    }, []);\n    return [state, setObjectState];\n}\n"},"links":[{"name":"UseArrayState","path":"use-array-state"},{"name":"UseBooleanState","path":"use-boolean-state"},{"name":"UseDebounce","path":"use-debounce"},{"name":"UseDirtyTracking","path":"use-dirty-tracking"},{"name":"UseObjectState","path":"use-object-state"}],"readme":"<h1>useObjectState</h1>\n<blockquote>\n<p>Make it easier to work with state of objects</p>\n</blockquote>\n<p><a href=\"https://claveconsulting.github.io/react-hooks/use-object-state\">Documentation</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @clave/use-object-state\n</code></pre></div>\n<p>The goal of this hook is to make it easier to manipulate objects stored in state. There are methods available to set, edit or append/change several properties oy the object stored in state. The manipulation methods are available on the <code>setState</code> method, for example <code>setState.set('key', value)</code>.</p>\n<h2>Usage</h2>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code><span class=\"token keyword module\">import</span> <span class=\"token imports\">useObjectState</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@clave/use-object-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// useObjectState instead of useState</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useObjectState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Ada Lovelace\"</span><span class=\"token punctuation\">,</span>\n  born<span class=\"token operator\">:</span> <span class=\"token string\">\"December 10, 1815\"</span><span class=\"token punctuation\">,</span>\n  died<span class=\"token operator\">:</span> <span class=\"token string\">\"November 27, 1852\"</span><span class=\"token punctuation\">,</span>\n  aged<span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   name: \"Ada Lovelace\",</span>\n<span class=\"token comment\">//   born: \"December 10, 1815\",</span>\n<span class=\"token comment\">//   died: \"November 27, 1852\",</span>\n<span class=\"token comment\">//   aged: 36,</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// setValue behaves like normal</span>\n<span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the value is now an empty object, {}</span>\n\n<span class=\"token comment\">// Set a key to a value</span>\nsetValue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grace Hopper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   name: \"Grace Hopper\",</span>\n<span class=\"token comment\">//   born: \"December 10, 1815\",</span>\n<span class=\"token comment\">//   died: \"November 27, 1852\",</span>\n<span class=\"token comment\">//   aged: 36,</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// Set several keys to values</span>\nsetValue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Grace Hopper\"</span><span class=\"token punctuation\">,</span>\n  aged<span class=\"token operator\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   name: \"Grace Hopper\",</span>\n<span class=\"token comment\">//   born: \"December 10, 1815\",</span>\n<span class=\"token comment\">//   died: \"November 27, 1852\",</span>\n<span class=\"token comment\">//   aged: 85,</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// Edit a key</span>\nsetValue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">edit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> name<span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">ToUpperCase</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   name: \"ADA LOVELACE\",</span>\n<span class=\"token comment\">//   born: \"December 10, 1815\",</span>\n<span class=\"token comment\">//   died: \"November 27, 1852\",</span>\n<span class=\"token comment\">//   aged: 36,</span>\n<span class=\"token comment\">// }</span>\n</code></pre></div>\n","changelog":"<h1>Change Log</h1>\n<p>All notable changes to this project will be documented in this file.\nSee <a href=\"https://conventionalcommits.org\">Conventional Commits</a> for commit guidelines.</p>\n<h2><a href=\"https://github.com/ClaveConsulting/react-hooks/compare/@clave/use-object-state@0.0.3...@clave/use-object-state@1.0.1\">1.0.1</a> (2020-10-20)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li>time for v1.0.0 (<a href=\"https://github.com/ClaveConsulting/react-hooks/commit/0c6021898e7f87e1b1950d28131ec610165a8d15\">0c60218</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/ClaveConsulting/react-hooks/compare/@clave/use-object-state@0.0.2...@clave/use-object-state@0.0.3\">0.0.3</a> (2020-10-14)</h2>\n<p><strong>Note:</strong> Version bump only for package @clave/use-object-state</p>\n<h2>0.0.2 (2020-10-14)</h2>\n<p><strong>Note:</strong> Version bump only for package @clave/use-object-state</p>\n"},"__N_SSG":true}