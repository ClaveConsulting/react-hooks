{"pageProps":{"demo":{"ts":"import { FormEvent, useCallback, useState } from \"react\";\nimport useArrayState from \"use-array-state\";\n\ninterface TodoItem {\n  readonly description: string;\n  readonly done: boolean;\n}\nexport default function Demo() {\n  const [items, setItems] = useArrayState<TodoItem>([]);\n  const [value, setValue] = useState(\"\");\n\n  const submit = useCallback(\n    (e: FormEvent) => {\n      setItems.append({ description: value, done: false });\n      setValue(\"\");\n      e.preventDefault();\n    },\n    [value]\n  );\n\n  return (\n    <div>\n      <h2>todos</h2>\n      <ul>\n        {items.map(({ done, description }, index) => (\n          <li>\n            <input\n              type=\"checkbox\"\n              onChange={() =>\n                setItems.editAt(index, (old) => ({ ...old, done: !done }))\n              }\n            />\n            <span style={{ textDecoration: done ? \"line-through\" : \"none\" }}>\n              {description}\n            </span>\n            <button onClick={() => setItems.removeAt(index)}>X</button>\n          </li>\n        ))}\n      </ul>\n\n      <form onSubmit={submit}>\n        <input onChange={(e) => setValue(e.target.value)} value={value} />\n        <button type=\"submit\" disabled={!value}>\n          Add\n        </button>\n      </form>\n    </div>\n  );\n}\n","js":"import { useCallback, useState } from \"react\";\nimport useArrayState from \"use-array-state\";\nexport default function Demo() {\n    const [items, setItems] = useArrayState([]);\n    const [value, setValue] = useState(\"\");\n    const submit = useCallback((e) => {\n        setItems.append({ description: value, done: false });\n        setValue(\"\");\n        e.preventDefault();\n    }, [value]);\n    return (<div>\n      <h2>todos</h2>\n      <ul>\n        {items.map(({ done, description }, index) => (<li>\n            <input type=\"checkbox\" onChange={() => setItems.editAt(index, (old) => ({ ...old, done: !done }))}/>\n            <span style={{ textDecoration: done ? \"line-through\" : \"none\" }}>\n              {description}\n            </span>\n            <button onClick={() => setItems.removeAt(index)}>X</button>\n          </li>))}\n      </ul>\n\n      <form onSubmit={submit}>\n        <input onChange={(e) => setValue(e.target.value)} value={value}/>\n        <button type=\"submit\" disabled={!value}>\n          Add\n        </button>\n      </form>\n    </div>);\n}\n"},"source":{"ts":"import { Dispatch, SetStateAction, useMemo, useState } from \"react\";\n\nexport interface SetArrayState<T> extends Dispatch<SetStateAction<T[]>> {\n  /**\n   * Appends a value to the end array\n   * @param value The value to append to the array\n   */\n  append(value: T): void;\n\n  /**\n   * Inserts a value into the array at a specific position\n   * @param index The position in which to insert the value\n   * @param value The value to insert into the array\n   */\n\n  insertAt(index: number, value: T): void;\n\n  /**\n   * Prepends a vaule to the beginning of the array\n   * @param value The vaule to prepend to the array\n   */\n  prepend(value: T): void;\n\n  /**\n   * Removes the specific value from the array\n   *\n   * This relies on strict equality, and will remove all\n   * matching elements from the array\n   * @param value The value to remove\n   */\n  remove(value: T): void;\n\n  /**\n   * Removes the item at the specific index from the array\n   * @param index The position of the item to remove\n   */\n  removeAt(index: number): void;\n\n  /**\n   * Edits the element at a specific position in the array.\n   * The second parameter is a function that receives the existing item\n   * and returns the new item\n   *\n   * @param index The position in the array of the item to edit\n   * @param edit The lambda function used to edit the item\n   */\n  editAt(index: number, edit: (old: T) => T): void;\n\n  /**\n   * Replaces the item at a position in the array with a new item\n   * @param index The position in the array of the item to replace\n   * @param value The new value to replace the old value with\n   */\n  replaceAt(index: number, value: T): void;\n\n  /**\n   * Replaces (potentially several) items in the array with a new item\n   *\n   * @param oldValue The old value that should be replaced\n   * @param newValue The new value to be used instead of the old value\n   */\n  replace(oldValue: T, newValue: T): void;\n}\n\n/**\n * Create a state for an array with useful array manipulation methods\n *\n * @param initial The initial array or factory function\n * @returns A pair of state and setState\n */\nexport default function useArrayState<T>(\n  initial: T[] | (() => T[])\n): [T[], SetArrayState<T>] {\n  const [state, setState] = useState<T[]>(initial);\n\n  const setArrayState = useMemo<SetArrayState<T>>(() => {\n    const setValue = (v: SetStateAction<T[]>) => setState(v);\n\n    setValue.append = (value: T) => {\n      setState((existing) => [...existing, value]);\n    };\n\n    setValue.insertAt = (index: number, value: T) => {\n      setState((existing) => {\n        const changed = [...existing];\n        changed.splice(index, 0, value);\n        return changed;\n      });\n    };\n\n    setValue.prepend = (value: T) => {\n      setState((existing) => [value, ...existing]);\n    };\n\n    setValue.removeAt = (index: number) => {\n      setState((existing) => existing.filter((_, i) => i !== index));\n    };\n\n    setValue.remove = (value: T) => {\n      setState((existing) => existing.filter((v) => v !== value));\n    };\n\n    setValue.editAt = (index: number, edit: (old: T) => T) => {\n      setState((existing) =>\n        existing.map((entry, i) => (i === index ? edit(entry) : entry))\n      );\n    };\n\n    setValue.replaceAt = (index: number, value: T) => {\n      setState((existing) =>\n        existing.map((entry, i) => (i === index ? value : entry))\n      );\n    };\n\n    setValue.replace = (oldValue: T, newValue: T) => {\n      setState((existing) =>\n        existing.map((entry) => (entry === oldValue ? newValue : entry))\n      );\n    };\n\n    return setValue;\n  }, []);\n\n  return [state, setArrayState];\n}\n","js":"import { useMemo, useState } from \"react\";\n/**\n * Create a state for an array with useful array manipulation methods\n *\n * @param initial The initial array or factory function\n * @returns A pair of state and setState\n */\nexport default function useArrayState(initial) {\n    const [state, setState] = useState(initial);\n    const setArrayState = useMemo(() => {\n        const setValue = (v) => setState(v);\n        setValue.append = (value) => {\n            setState((existing) => [...existing, value]);\n        };\n        setValue.insertAt = (index, value) => {\n            setState((existing) => {\n                const changed = [...existing];\n                changed.splice(index, 0, value);\n                return changed;\n            });\n        };\n        setValue.prepend = (value) => {\n            setState((existing) => [value, ...existing]);\n        };\n        setValue.removeAt = (index) => {\n            setState((existing) => existing.filter((_, i) => i !== index));\n        };\n        setValue.remove = (value) => {\n            setState((existing) => existing.filter((v) => v !== value));\n        };\n        setValue.editAt = (index, edit) => {\n            setState((existing) => existing.map((entry, i) => (i === index ? edit(entry) : entry)));\n        };\n        setValue.replaceAt = (index, value) => {\n            setState((existing) => existing.map((entry, i) => (i === index ? value : entry)));\n        };\n        setValue.replace = (oldValue, newValue) => {\n            setState((existing) => existing.map((entry) => (entry === oldValue ? newValue : entry)));\n        };\n        return setValue;\n    }, []);\n    return [state, setArrayState];\n}\n"}},"__N_SSG":true}