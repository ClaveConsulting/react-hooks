{"pageProps":{"id":"use-array-state","name":"UseArrayState","demo":{"ts":"import useArrayState from \"@clave/use-array-state\";\nimport * as React from \"react\";\nimport { FormEvent, useCallback, useState } from \"react\";\nimport style from \"./style.module.css\";\n\ninterface TodoItem {\n  readonly description: string;\n  readonly done: boolean;\n}\nexport default function Demo() {\n  const [items, setItems] = useArrayState<TodoItem>([]);\n  const [value, setValue] = useState(\"\");\n\n  const submit = useCallback(\n    (e: FormEvent) => {\n      setItems.append({ description: value, done: false });\n      setValue(\"\");\n      e.preventDefault();\n    },\n    [value]\n  );\n\n  return (\n    <div className={style.demo}>\n      <h2>todos</h2>\n      <ul>\n        {items.map(({ done, description }, index) => (\n          <li>\n            <input\n              type=\"checkbox\"\n              onChange={() =>\n                setItems.editAt(index, (old) => ({ ...old, done: !done }))\n              }\n            />\n            <span style={{ textDecoration: done ? \"line-through\" : \"none\" }}>\n              {description}\n            </span>\n            <button onClick={() => setItems.removeAt(index)}>X</button>\n          </li>\n        ))}\n      </ul>\n\n      <form onSubmit={submit}>\n        <input onChange={(e) => setValue(e.target.value)} value={value} />\n        <button type=\"submit\" disabled={!value}>\n          Add\n        </button>\n      </form>\n    </div>\n  );\n}\n","js":"import useArrayState from \"@clave/use-array-state\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport style from \"./style.module.css\";\nexport default function Demo() {\n    const [items, setItems] = useArrayState([]);\n    const [value, setValue] = useState(\"\");\n    const submit = useCallback((e) => {\n        setItems.append({ description: value, done: false });\n        setValue(\"\");\n        e.preventDefault();\n    }, [value]);\n    return (<div className={style.demo}>\n      <h2>todos</h2>\n      <ul>\n        {items.map(({ done, description }, index) => (<li>\n            <input type=\"checkbox\" onChange={() => setItems.editAt(index, (old) => ({ ...old, done: !done }))}/>\n            <span style={{ textDecoration: done ? \"line-through\" : \"none\" }}>\n              {description}\n            </span>\n            <button onClick={() => setItems.removeAt(index)}>X</button>\n          </li>))}\n      </ul>\n\n      <form onSubmit={submit}>\n        <input onChange={(e) => setValue(e.target.value)} value={value}/>\n        <button type=\"submit\" disabled={!value}>\n          Add\n        </button>\n      </form>\n    </div>);\n}\n"},"source":{"ts":"import { Dispatch, SetStateAction, useMemo, useState } from \"react\";\n\nexport interface SetArrayState<T> extends Dispatch<SetStateAction<T[]>> {\n  /**\n   * Appends a value to the end array\n   * @param value The value to append to the array\n   */\n  append(...values: T[]): void;\n\n  /**\n   * Inserts a value into the array at a specific position\n   * @param index The position in which to insert the value\n   * @param value The value to insert into the array\n   */\n\n  insertAt(index: number, ...values: T[]): void;\n\n  /**\n   * Prepends a vaule to the beginning of the array\n   * @param value The vaule to prepend to the array\n   */\n  prepend(...values: T[]): void;\n\n  /**\n   * Removes the specific value from the array\n   *\n   * This relies on strict equality, and will remove all\n   * matching elements from the array\n   * @param value The value to remove\n   */\n  remove(...values: T[]): void;\n\n  /**\n   * Removes the item at the specific index from the array\n   * @param index The position of the item to remove\n   */\n  removeAt(index: number): void;\n\n  /**\n   * Removes the items that match the filter test\n   *\n   * @param filter Test for which items to remove\n   */\n  removeWhere(filter: (value: T) => boolean): void;\n\n  /**\n   * Edits the element at a specific position in the array.\n   * The second parameter is a function that receives the existing item\n   * and returns the new item\n   *\n   * @param index The position in the array of the item to edit\n   * @param edit The lambda function used to edit the item\n   */\n  editAt(index: number, edit: (old: T) => T): void;\n\n  /**\n   * Edits the elements that match the filter test.\n   * The second parameter is a function that receives the existing item\n   * and returns the new item\n   *\n   * @param filter Test for which items to edit\n   * @param edit The lambda function used to edit the item\n   */\n  editWhere(filter: (value: T) => boolean, edit: (old: T) => T): void;\n\n  /**\n   * Replaces the item at a position in the array with a new item\n   * @param index The position in the array of the item to replace\n   * @param value The new value to replace the old value with\n   */\n  replaceAt(index: number, value: T): void;\n\n  /**\n   * Replaces (potentially several) items in the array with a new item\n   *\n   * @param oldValue The old value that should be replaced\n   * @param newValue The new value to be used instead of the old value\n   */\n  replace(oldValue: T, newValue: T): void;\n}\n\n/**\n * Create a state for an array with useful array manipulation methods\n *\n * @param initial The initial array or factory function\n * @returns A pair of state and setState\n */\nexport default function useArrayState<T>(initial: T[] | (() => T[])) {\n  const [state, setState] = useState<T[]>(initial);\n\n  const setArrayState = useMemo(() => {\n    const setValue: SetArrayState<T> = (v: SetStateAction<T[]>) => setState(v);\n\n    /**\n     * Appends a value to the end array\n     * @param values One or more values to append to the array\n     */\n    setValue.append = (...values: T[]) => {\n      setState(append(...values));\n    };\n\n    /**\n     * Inserts a value into the array at a specific position\n     * @param index The position in which to insert the value\n     * @param values One or more values to insert into the array\n     */\n    setValue.insertAt = (index: number, ...values: T[]) => {\n      setState(insertAt(index, ...values));\n    };\n\n    /**\n     * Prepends a vaule to the beginning of the array\n     * @param values One or more values to prepend to the array\n     */\n    setValue.prepend = (...values: T[]) => {\n      setState(prepend(...values));\n    };\n\n    /**\n     * Removes the item at the specific index from the array\n     * @param index The position of the item to remove\n     */\n    setValue.removeAt = (index: number) => {\n      setState(removeAt(index));\n    };\n\n    /**\n     * Removes the specific value from the array\n     *\n     * This relies on strict equality, and will remove all\n     * matching elements from the array\n     * @param values One or more values to remove\n     */\n    setValue.remove = (...values: T[]) => {\n      setState(remove(values));\n    };\n\n    /**\n     * Removes the items that match the filter test\n     *\n     * @param filter Test for which items to remove\n     */\n    setValue.removeWhere = (filter: (value: T) => boolean) => {\n      setState(removeWhere(filter));\n    };\n\n    /**\n     * Edits the element at a specific position in the array.\n     * The second parameter is a function that receives the existing item\n     * and returns the new item\n     *\n     * @param index The position in the array of the item to edit\n     * @param edit The lambda function used to edit the item\n     */\n    setValue.editAt = (index: number, edit: (old: T) => T) => {\n      setState(editAt(index, edit));\n    };\n\n    /**\n     * Edits the elements that match the filter test.\n     * The second parameter is a function that receives the existing item\n     * and returns the new item\n     *\n     * @param filter Test for which items to edit\n     * @param edit The lambda function used to edit the item\n     */\n    setValue.editWhere = (filter: (value: T) => boolean, edit: (old: T) => T) => {\n      setState(editWhere(filter, edit));\n    };\n\n    /**\n     * Replaces the item at a position in the array with a new item\n     * @param index The position in the array of the item to replace\n     * @param value The new value to replace the old value with\n     */\n    setValue.replaceAt = (index: number, value: T) => {\n      setState(replaceAt(index, value));\n    };\n\n    /**\n     * Replaces (potentially several) items in the array with a new item\n     *\n     * @param oldValue The old value that should be replaced\n     * @param newValue The new value to be used instead of the old value\n     */\n    setValue.replace = (oldValue: T, newValue: T) => {\n      setState(replace(oldValue, newValue)\n      );\n    };\n\n    return setValue;\n  }, []);\n\n  return [state, setArrayState] as const;\n}\n\nexport function append<T>(...values: T[]): SetStateAction<T[]> {\n  return (existing) => [...existing, ...values];\n}\n\nexport function insertAt<T>(index: number, ...values: T[]): SetStateAction<T[]> {\n  return (existing) => {\n    const changed = [...existing];\n    changed.splice(index, 0, ...values);\n    return changed;\n  };\n}\n\nexport function prepend<T>(...values: T[]): SetStateAction<T[]> {\n  return (existing) => [...values, ...existing];\n}\n\nexport function removeAt<T>(index: number): SetStateAction<T[]> {\n  return (existing) => existing.filter((_, i) => i !== index);\n}\n\nexport function remove<T>(values: T[]): SetStateAction<T[]> {\n  return (existing) => existing.filter((v) => !values.includes(v));\n}\n\nexport function removeWhere<T>(filter: (value: T) => boolean): SetStateAction<T[]> {\n  return (existing) => existing.filter((v) => !filter(v));\n}\n\nexport function editAt<T>(index: number, edit: (old: T) => T): SetStateAction<T[]> {\n  return (existing) => existing.map((entry, i) => (i === index ? edit(entry) : entry));\n}\n\nexport function editWhere<T>(filter: (value: T) => boolean, edit: (old: T) => T): SetStateAction<T[]> {\n  return (existing) => existing.map((entry) => (filter(entry) ? edit(entry) : entry));\n}\n\nexport function replaceAt<T>(index: number, value: T): SetStateAction<T[]> {\n  return (existing) => existing.map((entry, i) => (i === index ? value : entry));\n}\n\nexport function replace<T>(oldValue: T, newValue: T): SetStateAction<T[]> {\n  return (existing) => existing.map((entry) => (entry === oldValue ? newValue : entry));\n}","js":"import { useMemo, useState } from \"react\";\n/**\n * Create a state for an array with useful array manipulation methods\n *\n * @param initial The initial array or factory function\n * @returns A pair of state and setState\n */\nexport default function useArrayState(initial) {\n    const [state, setState] = useState(initial);\n    const setArrayState = useMemo(() => {\n        const setValue = (v) => setState(v);\n        /**\n         * Appends a value to the end array\n         * @param values One or more values to append to the array\n         */\n        setValue.append = (...values) => {\n            setState(append(...values));\n        };\n        /**\n         * Inserts a value into the array at a specific position\n         * @param index The position in which to insert the value\n         * @param values One or more values to insert into the array\n         */\n        setValue.insertAt = (index, ...values) => {\n            setState(insertAt(index, ...values));\n        };\n        /**\n         * Prepends a vaule to the beginning of the array\n         * @param values One or more values to prepend to the array\n         */\n        setValue.prepend = (...values) => {\n            setState(prepend(...values));\n        };\n        /**\n         * Removes the item at the specific index from the array\n         * @param index The position of the item to remove\n         */\n        setValue.removeAt = (index) => {\n            setState(removeAt(index));\n        };\n        /**\n         * Removes the specific value from the array\n         *\n         * This relies on strict equality, and will remove all\n         * matching elements from the array\n         * @param values One or more values to remove\n         */\n        setValue.remove = (...values) => {\n            setState(remove(values));\n        };\n        /**\n         * Removes the items that match the filter test\n         *\n         * @param filter Test for which items to remove\n         */\n        setValue.removeWhere = (filter) => {\n            setState(removeWhere(filter));\n        };\n        /**\n         * Edits the element at a specific position in the array.\n         * The second parameter is a function that receives the existing item\n         * and returns the new item\n         *\n         * @param index The position in the array of the item to edit\n         * @param edit The lambda function used to edit the item\n         */\n        setValue.editAt = (index, edit) => {\n            setState(editAt(index, edit));\n        };\n        /**\n         * Edits the elements that match the filter test.\n         * The second parameter is a function that receives the existing item\n         * and returns the new item\n         *\n         * @param filter Test for which items to edit\n         * @param edit The lambda function used to edit the item\n         */\n        setValue.editWhere = (filter, edit) => {\n            setState(editWhere(filter, edit));\n        };\n        /**\n         * Replaces the item at a position in the array with a new item\n         * @param index The position in the array of the item to replace\n         * @param value The new value to replace the old value with\n         */\n        setValue.replaceAt = (index, value) => {\n            setState(replaceAt(index, value));\n        };\n        /**\n         * Replaces (potentially several) items in the array with a new item\n         *\n         * @param oldValue The old value that should be replaced\n         * @param newValue The new value to be used instead of the old value\n         */\n        setValue.replace = (oldValue, newValue) => {\n            setState(replace(oldValue, newValue));\n        };\n        return setValue;\n    }, []);\n    return [state, setArrayState];\n}\nexport function append(...values) {\n    return (existing) => [...existing, ...values];\n}\nexport function insertAt(index, ...values) {\n    return (existing) => {\n        const changed = [...existing];\n        changed.splice(index, 0, ...values);\n        return changed;\n    };\n}\nexport function prepend(...values) {\n    return (existing) => [...values, ...existing];\n}\nexport function removeAt(index) {\n    return (existing) => existing.filter((_, i) => i !== index);\n}\nexport function remove(values) {\n    return (existing) => existing.filter((v) => !values.includes(v));\n}\nexport function removeWhere(filter) {\n    return (existing) => existing.filter((v) => !filter(v));\n}\nexport function editAt(index, edit) {\n    return (existing) => existing.map((entry, i) => (i === index ? edit(entry) : entry));\n}\nexport function editWhere(filter, edit) {\n    return (existing) => existing.map((entry) => (filter(entry) ? edit(entry) : entry));\n}\nexport function replaceAt(index, value) {\n    return (existing) => existing.map((entry, i) => (i === index ? value : entry));\n}\nexport function replace(oldValue, newValue) {\n    return (existing) => existing.map((entry) => (entry === oldValue ? newValue : entry));\n}\n"},"links":[{"name":"UseArrayState","path":"use-array-state"},{"name":"UseBooleanState","path":"use-boolean-state"},{"name":"UseDebounce","path":"use-debounce"},{"name":"UseDirtyTracking","path":"use-dirty-tracking"},{"name":"UseObjectState","path":"use-object-state"}],"readme":"<h1>useArrayState</h1>\n<blockquote>\n<p>Make it easier to work with stateful arrays</p>\n</blockquote>\n<p><a href=\"https://claveconsulting.github.io/react-hooks/use-array-state\">Documentation</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @clave/use-array-state\n</code></pre></div>\n<p>The goal of this hook is to make it easier to manipulate array state. For example, if you want to add a new item to an array you can call <code>setState.append(value)</code>.</p>\n<h2>Usage</h2>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">useArrayState</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@clave/use-array-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// useArrayState instead of useState</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useArrayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// setItems behaves like normal</span>\n<span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"x\", \"y\", \"z\"]</span>\n\n<span class=\"token comment\">// Append an item to the end of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\"]</span>\n\n<span class=\"token comment\">// Append multiple items to the end of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]</span>\n\n<span class=\"token comment\">// Prepend an item to the beginning of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"x\", \"a\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Prepend multiple items to the beginning of the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"x\", \"y\", \"z\", \"a\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Insert an item somewhere in the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">insertAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Insert multiple items somewhere in the array</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">insertAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"y\", \"z\", \"b\", \"c\"]</span>\n\n<span class=\"token comment\">// Remove a value from the list</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"c\"]</span>\n\n<span class=\"token comment\">// Remove several values from the list</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"c\"]</span>\n\n<span class=\"token comment\">// Remove the value at specified index</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"c\"]</span>\n\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeWhere</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> v <span class=\"token operator\">===</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"c\"]</span>\n\n<span class=\"token comment\">// Edit the value at a specified index</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">editAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token method function property-access\"><span class=\"token maybe-class-name\">ToUpperCase</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"B\", \"c\"]</span>\n\n<span class=\"token comment\">// Replace the value at a specified index</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replaceAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"c\"]</span>\n\n<span class=\"token comment\">// Replace a value with another value</span>\nsetItems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"a\", \"x\", \"c\"]</span>\n</code></pre></div>\n<h3>Alternative usage</h3>\n<p>If you worry about the size of the package with all these, potentially unnecessary, methods, then there is an alternative way to use it. All of the methods are exported from the module, so you can import each one individually and use only the ones you need:</p>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> append<span class=\"token punctuation\">,</span> removeAt <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@clave/use-array-state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    ))}</span>\n<span class=\"token plain-text\">  )</span>\n<span class=\"token plain-text\">}</span>\n<span class=\"token plain-text\"></span>\n</code></pre></div>\n<p>That is, instead of using <code>setItems.something(args)</code> you can call <code>setItems(something(args))</code> if you add <code>import { something } from \"@clave/use-array-state\";</code>. This will let the tree-shaker exclude all unused methods.</p>\n","changelog":"<h1>Change Log</h1>\n<p>All notable changes to this project will be documented in this file.\nSee <a href=\"https://conventionalcommits.org\">Conventional Commits</a> for commit guidelines.</p>\n<h2><a href=\"https://github.com/ClaveConsulting/react-hooks/compare/@clave/use-array-state@1.1.0...@clave/use-array-state@1.1.1\">1.1.1</a> (2021-01-07)</h2>\n<p><strong>Note:</strong> Version bump only for package @clave/use-array-state</p>\n<h1><a href=\"https://github.com/ClaveConsulting/react-hooks/compare/@clave/use-array-state@1.0.1...@clave/use-array-state@1.1.0\">1.1.0</a> (2020-10-23)</h1>\n<h3>Features</h3>\n<ul>\n<li><strong>use-array-state:</strong> Make tree-shaker friendly (<a href=\"https://github.com/ClaveConsulting/react-hooks/commit/ff00bb06324d7cf4e4fdc70feb821ea9b92ab063\">ff00bb0</a>)</li>\n<li><strong>use-array-state:</strong> removeWhere (<a href=\"https://github.com/ClaveConsulting/react-hooks/commit/36f05462998732e4dcc4e41112086b216aec1543\">36f0546</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/ClaveConsulting/react-hooks/compare/@clave/use-array-state@0.0.2...@clave/use-array-state@1.0.1\">1.0.1</a> (2020-10-20)</h2>\n<h3>Bug Fixes</h3>\n<ul>\n<li>time for v1.0.0 (<a href=\"https://github.com/ClaveConsulting/react-hooks/commit/0c6021898e7f87e1b1950d28131ec610165a8d15\">0c60218</a>)</li>\n</ul>\n<h2>0.0.2 (2020-10-14)</h2>\n<p><strong>Note:</strong> Version bump only for package @clave/use-array-state</p>\n"},"__N_SSG":true}