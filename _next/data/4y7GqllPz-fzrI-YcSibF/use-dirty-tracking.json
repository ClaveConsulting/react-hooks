{"pageProps":{"id":"use-dirty-tracking","name":"UseDirtyTracking","demo":{"ts":"import useDirtyTracking from \"@clave/use-dirty-tracking\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport style from \"./style.module.css\";\n\nexport default function Demo() {\n  const [value1, setValue1] = useState(\"\");\n  const [value2, setValue2] = useState(0);\n  const [isDirty, resetDirty] = useDirtyTracking(value1, value2);\n\n  const submit = useCallback(() => {\n    resetDirty();\n  }, []);\n\n  return (\n    <div className={style.demo}>\n      <label>\n        Value1:{\" \"}\n        <input value={value1} onChange={(e) => setValue1(e.target.value)} />\n      </label>\n      <label>\n        Value2:{\" \"}\n        <input\n          type=\"number\"\n          value={value2}\n          onChange={(e) => setValue2(e.target.valueAsNumber)}\n        />\n      </label>\n      {isDirty ? (\n        <strong>You can now save the changes</strong>\n      ) : (\n        <em>Change one of the values above</em>\n      )}\n      <button disabled={!isDirty} onClick={submit}>\n        Save changes\n      </button>\n    </div>\n  );\n}\n","js":"import useDirtyTracking from \"@clave/use-dirty-tracking\";\nimport * as React from \"react\";\nimport { useCallback, useState } from \"react\";\nimport style from \"./style.module.css\";\nexport default function Demo() {\n    const [value1, setValue1] = useState(\"\");\n    const [value2, setValue2] = useState(0);\n    const [isDirty, resetDirty] = useDirtyTracking(value1, value2);\n    const submit = useCallback(() => {\n        resetDirty();\n    }, []);\n    return (<div className={style.demo}>\n      <label>\n        Value1:{\" \"}\n        <input value={value1} onChange={(e) => setValue1(e.target.value)}/>\n      </label>\n      <label>\n        Value2:{\" \"}\n        <input type=\"number\" value={value2} onChange={(e) => setValue2(e.target.valueAsNumber)}/>\n      </label>\n      {isDirty ? (<strong>You can now save the changes</strong>) : (<em>Change one of the values above</em>)}\n      <button disabled={!isDirty} onClick={submit}>\n        Save changes\n      </button>\n    </div>);\n}\n"},"source":{"ts":"import { useCallback, useEffect, useRef, useState } from \"react\";\n\n/**\n * Track if one or more values have changed\n *\n * @param values The values to keep track of\n */\nexport default function useDirtyTracking(...values: unknown[]): [boolean, () => void] {\n  const [original, setOriginal] = useState(values);\n\n  const latest = useRef(values);\n  useEffect(() => {\n    latest.current = values;\n  });\n\n  const resetDirty = useCallback(() => setOriginal(latest.current), []);\n\n  return [isDirty(original, values), resetDirty];\n}\n\nexport function isDirty(a: unknown[], b: unknown[]){\n  if(a.length !== b.length){\n    return true;\n  }\n\n  for(let i=0; i<a.length; i++){\n    if(!Object.is(a[i], b[i])) return true\n  }\n\n  return false;\n}","js":"import { useCallback, useEffect, useRef, useState } from \"react\";\n/**\n * Track if one or more values have changed\n *\n * @param values The values to keep track of\n */\nexport default function useDirtyTracking(...values) {\n    const [original, setOriginal] = useState(values);\n    const latest = useRef(values);\n    useEffect(() => {\n        latest.current = values;\n    });\n    const resetDirty = useCallback(() => setOriginal(latest.current), []);\n    return [isDirty(original, values), resetDirty];\n}\nexport function isDirty(a, b) {\n    if (a.length !== b.length) {\n        return true;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (!Object.is(a[i], b[i]))\n            return true;\n    }\n    return false;\n}\n"},"links":[{"name":"UseArrayState","path":"use-array-state"},{"name":"UseBooleanState","path":"use-boolean-state"},{"name":"UseDebounce","path":"use-debounce"},{"name":"UseDirtyTracking","path":"use-dirty-tracking"},{"name":"UseObjectState","path":"use-object-state"}],"readme":"<h1>useDirtyTracking</h1>\n<blockquote>\n<p>Track if one or more values have changed</p>\n</blockquote>\n<p><a href=\"https://claveconsulting.github.io/react-hooks/use-dirty-tracking\">Documentation</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @clave/use-dirty-tracking\n</code></pre></div>\n<p>This hook will let you konw if values have changed. For example in a form you can enable the submit button if the values have changed.</p>\n<h2>Usage</h2>\n<div class=\"remark-highlight\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">useDirtyTracking</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"@clave/use-dirty-tracking\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"original\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// supply one (or more) values to track</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isDirty<span class=\"token punctuation\">,</span> resetDirty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDirtyTracking</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// isDirty === false</span>\n\n<span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// isDirty === true</span>\n\n<span class=\"token function\">resetDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// isDirty === false</span>\n</code></pre></div>\n","changelog":"<h1>Change Log</h1>\n<p>All notable changes to this project will be documented in this file.\nSee <a href=\"https://conventionalcommits.org\">Conventional Commits</a> for commit guidelines.</p>\n<h2>1.0.1 (2020-10-30)</h2>\n<p><strong>Note:</strong> Version bump only for package @clave/use-dirty-tracking</p>\n"},"__N_SSG":true}